// Code generated by genmock. DO NOT EDIT.
//  genmock version: v0.0.5

// Package quote contains mock implementer of the ServiceI interface.
package quote

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"gitlab.com/so_literate/genmock"
)

// ServiceI_Mock implements mock of the ServiceI interface.
type ServiceI_Mock struct {
	Mock *genmock.Mock
	t    genmock.TestingT

	ReturnMockErrorAsResult bool
}

// NewServiceI_Mock returns a new mock of ServiceI interface implementer.
// Takes *testing.T to stop failed testing process.
func NewServiceI_Mock(t genmock.TestingT) *ServiceI_Mock {
	return &ServiceI_Mock{
		Mock: genmock.NewMock(),
		t:    t,
	}
}

func (_m *ServiceI_Mock) Delete(_a0 context.Context, _a1 uuid.UUID) error {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("Delete", _a0, _a1)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return fmt.Errorf("(Delete) call mock method: %w", _err)
		}
		_m.t.Fatalf("(Delete) call mock method: %s", _err)
	}

	if len(_ret) != 1 {
		_err = fmt.Errorf("%w: want 1, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return fmt.Errorf("(Delete) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(Delete) check length of returned params: %s", _err)
	}

	var _r0 error
	if _r := _ret[0]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r0 = _v
		} else {
			_err = fmt.Errorf("%w [ret #0]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return fmt.Errorf("(Delete) check returned type: %w", _err)
			}
			_m.t.Fatalf("(Delete) check returned type: %s", _err)
		}
	}

	return _r0
}

func (_m *ServiceI_Mock) FindByID(_a0 context.Context, _a1 uuid.UUID) (Quote, error) {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("FindByID", _a0, _a1)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return Quote{}, fmt.Errorf("(FindByID) call mock method: %w", _err)
		}
		_m.t.Fatalf("(FindByID) call mock method: %s", _err)
	}

	if len(_ret) != 2 {
		_err = fmt.Errorf("%w: want 2, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return Quote{}, fmt.Errorf("(FindByID) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(FindByID) check length of returned params: %s", _err)
	}

	var _r0 Quote
	if _v, _ok := _ret[0].(Quote); _ok {
		_r0 = _v
	} else {
		_err = fmt.Errorf("%w [ret #0]: want 'Quote', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _ret[0])
		if _m.ReturnMockErrorAsResult {
			return Quote{}, fmt.Errorf("(FindByID) check returned type: %w", _err)
		}
		_m.t.Fatalf("(FindByID) check returned type: %s", _err)
	}

	var _r1 error
	if _r := _ret[1]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r1 = _v
		} else {
			_err = fmt.Errorf("%w [ret #1]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return Quote{}, fmt.Errorf("(FindByID) check returned type: %w", _err)
			}
			_m.t.Fatalf("(FindByID) check returned type: %s", _err)
		}
	}

	return _r0, _r1
}

func (_m *ServiceI_Mock) Upsert(_a0 context.Context, _a1 *Quote) error {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("Upsert", _a0, _a1)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return fmt.Errorf("(Upsert) call mock method: %w", _err)
		}
		_m.t.Fatalf("(Upsert) call mock method: %s", _err)
	}

	if len(_ret) != 1 {
		_err = fmt.Errorf("%w: want 1, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return fmt.Errorf("(Upsert) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(Upsert) check length of returned params: %s", _err)
	}

	var _r0 error
	if _r := _ret[0]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r0 = _v
		} else {
			_err = fmt.Errorf("%w [ret #0]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return fmt.Errorf("(Upsert) check returned type: %w", _err)
			}
			_m.t.Fatalf("(Upsert) check returned type: %s", _err)
		}
	}

	return _r0
}

// ServiceI_MockSet_Delete allows to set arguments and results of the mock call Delete.
type ServiceI_MockSet_Delete struct {
	Call *genmock.Call
}

// On_Delete adds a call of the Method to mock.
func (_m *ServiceI_Mock) On_Delete() ServiceI_MockSet_Delete {
	call := genmock.NewCall(
		"Delete",
		[]interface{}{genmock.Anything, genmock.AnythingOfType("uuid.UUID")},
		[]interface{}{nil},
		1,
	)
	_m.Mock.AddCall(call)
	return ServiceI_MockSet_Delete{Call: call}
}

// Args sets the exact values of the arguments.
func (_s ServiceI_MockSet_Delete) Args(_a0 context.Context, _a1 uuid.UUID) ServiceI_MockSet_Delete {
	_s.Call.Args[0] = _a0
	_s.Call.Args[1] = _a1
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s ServiceI_MockSet_Delete) ArgsAnything(_a0 interface{}, _a1 interface{}) ServiceI_MockSet_Delete {
	_s.Call.Args[0] = _a0
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a0 sets the exact value of the _a0 argument.
func (_s ServiceI_MockSet_Delete) Arg_a0(_a0 context.Context) ServiceI_MockSet_Delete {
	_s.Call.Args[0] = _a0
	return _s
}

// Arg_a0_Anything sets the interface value of the _a0 argument.
func (_s ServiceI_MockSet_Delete) Arg_a0_Anything(_a0 interface{}) ServiceI_MockSet_Delete {
	_s.Call.Args[0] = _a0
	return _s
}

// Arg_a0_Matcher sets matcher of the _a0 argument value.
func (_s ServiceI_MockSet_Delete) Arg_a0_Matcher(matcher func(_a0 interface{}) bool) ServiceI_MockSet_Delete {
	_s.Call.Args[0] = matcher
	return _s
}

// Arg_a1 sets the exact value of the _a1 argument.
func (_s ServiceI_MockSet_Delete) Arg_a1(_a1 uuid.UUID) ServiceI_MockSet_Delete {
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a1_Anything sets the interface value of the _a1 argument.
func (_s ServiceI_MockSet_Delete) Arg_a1_Anything(_a1 interface{}) ServiceI_MockSet_Delete {
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a1_Matcher sets matcher of the _a1 argument value.
func (_s ServiceI_MockSet_Delete) Arg_a1_Matcher(matcher func(_a1 uuid.UUID) bool) ServiceI_MockSet_Delete {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(uuid.UUID)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[1] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s ServiceI_MockSet_Delete) Rets(_r0 error) ServiceI_MockSet_Delete {
	_s.Call.Returns[0] = _r0
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s ServiceI_MockSet_Delete) Times(times int) ServiceI_MockSet_Delete {
	_s.Call.Times = times
	return _s
}

// ServiceI_MockSet_FindByID allows to set arguments and results of the mock call FindByID.
type ServiceI_MockSet_FindByID struct {
	Call *genmock.Call
}

// On_FindByID adds a call of the Method to mock.
func (_m *ServiceI_Mock) On_FindByID() ServiceI_MockSet_FindByID {
	call := genmock.NewCall(
		"FindByID",
		[]interface{}{genmock.Anything, genmock.AnythingOfType("uuid.UUID")},
		[]interface{}{Quote{}, nil},
		1,
	)
	_m.Mock.AddCall(call)
	return ServiceI_MockSet_FindByID{Call: call}
}

// Args sets the exact values of the arguments.
func (_s ServiceI_MockSet_FindByID) Args(_a0 context.Context, _a1 uuid.UUID) ServiceI_MockSet_FindByID {
	_s.Call.Args[0] = _a0
	_s.Call.Args[1] = _a1
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s ServiceI_MockSet_FindByID) ArgsAnything(_a0 interface{}, _a1 interface{}) ServiceI_MockSet_FindByID {
	_s.Call.Args[0] = _a0
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a0 sets the exact value of the _a0 argument.
func (_s ServiceI_MockSet_FindByID) Arg_a0(_a0 context.Context) ServiceI_MockSet_FindByID {
	_s.Call.Args[0] = _a0
	return _s
}

// Arg_a0_Anything sets the interface value of the _a0 argument.
func (_s ServiceI_MockSet_FindByID) Arg_a0_Anything(_a0 interface{}) ServiceI_MockSet_FindByID {
	_s.Call.Args[0] = _a0
	return _s
}

// Arg_a0_Matcher sets matcher of the _a0 argument value.
func (_s ServiceI_MockSet_FindByID) Arg_a0_Matcher(matcher func(_a0 interface{}) bool) ServiceI_MockSet_FindByID {
	_s.Call.Args[0] = matcher
	return _s
}

// Arg_a1 sets the exact value of the _a1 argument.
func (_s ServiceI_MockSet_FindByID) Arg_a1(_a1 uuid.UUID) ServiceI_MockSet_FindByID {
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a1_Anything sets the interface value of the _a1 argument.
func (_s ServiceI_MockSet_FindByID) Arg_a1_Anything(_a1 interface{}) ServiceI_MockSet_FindByID {
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a1_Matcher sets matcher of the _a1 argument value.
func (_s ServiceI_MockSet_FindByID) Arg_a1_Matcher(matcher func(_a1 uuid.UUID) bool) ServiceI_MockSet_FindByID {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(uuid.UUID)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[1] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s ServiceI_MockSet_FindByID) Rets(_r0 Quote, _r1 error) ServiceI_MockSet_FindByID {
	_s.Call.Returns[0] = _r0
	_s.Call.Returns[1] = _r1
	return _s
}

// Ret_r0 sets the exact values of the _r0 result parameter.
func (_s ServiceI_MockSet_FindByID) Ret_r0(_r0 Quote) ServiceI_MockSet_FindByID {
	_s.Call.Returns[0] = _r0
	return _s
}

// Ret_r1 sets the exact values of the _r1 result parameter.
func (_s ServiceI_MockSet_FindByID) Ret_r1(_r1 error) ServiceI_MockSet_FindByID {
	_s.Call.Returns[1] = _r1
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s ServiceI_MockSet_FindByID) Times(times int) ServiceI_MockSet_FindByID {
	_s.Call.Times = times
	return _s
}

// ServiceI_MockSet_Upsert allows to set arguments and results of the mock call Upsert.
type ServiceI_MockSet_Upsert struct {
	Call *genmock.Call
}

// On_Upsert adds a call of the Method to mock.
func (_m *ServiceI_Mock) On_Upsert() ServiceI_MockSet_Upsert {
	call := genmock.NewCall(
		"Upsert",
		[]interface{}{genmock.Anything, genmock.AnythingOfType("*Quote")},
		[]interface{}{nil},
		1,
	)
	_m.Mock.AddCall(call)
	return ServiceI_MockSet_Upsert{Call: call}
}

// Args sets the exact values of the arguments.
func (_s ServiceI_MockSet_Upsert) Args(_a0 context.Context, _a1 *Quote) ServiceI_MockSet_Upsert {
	_s.Call.Args[0] = _a0
	_s.Call.Args[1] = _a1
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s ServiceI_MockSet_Upsert) ArgsAnything(_a0 interface{}, _a1 interface{}) ServiceI_MockSet_Upsert {
	_s.Call.Args[0] = _a0
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a0 sets the exact value of the _a0 argument.
func (_s ServiceI_MockSet_Upsert) Arg_a0(_a0 context.Context) ServiceI_MockSet_Upsert {
	_s.Call.Args[0] = _a0
	return _s
}

// Arg_a0_Anything sets the interface value of the _a0 argument.
func (_s ServiceI_MockSet_Upsert) Arg_a0_Anything(_a0 interface{}) ServiceI_MockSet_Upsert {
	_s.Call.Args[0] = _a0
	return _s
}

// Arg_a0_Matcher sets matcher of the _a0 argument value.
func (_s ServiceI_MockSet_Upsert) Arg_a0_Matcher(matcher func(_a0 interface{}) bool) ServiceI_MockSet_Upsert {
	_s.Call.Args[0] = matcher
	return _s
}

// Arg_a1 sets the exact value of the _a1 argument.
func (_s ServiceI_MockSet_Upsert) Arg_a1(_a1 *Quote) ServiceI_MockSet_Upsert {
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a1_Anything sets the interface value of the _a1 argument.
func (_s ServiceI_MockSet_Upsert) Arg_a1_Anything(_a1 interface{}) ServiceI_MockSet_Upsert {
	_s.Call.Args[1] = _a1
	return _s
}

// Arg_a1_Matcher sets matcher of the _a1 argument value.
func (_s ServiceI_MockSet_Upsert) Arg_a1_Matcher(matcher func(_a1 *Quote) bool) ServiceI_MockSet_Upsert {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(*Quote)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[1] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s ServiceI_MockSet_Upsert) Rets(_r0 error) ServiceI_MockSet_Upsert {
	_s.Call.Returns[0] = _r0
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s ServiceI_MockSet_Upsert) Times(times int) ServiceI_MockSet_Upsert {
	_s.Call.Times = times
	return _s
}
